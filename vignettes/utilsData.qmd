---
title: "Generating Synthetic Structures and Noise"
author: "Tina Rashid Jafari"
vignette: >
  %\VignetteIndexEntry{Generating Synthetic Structures and Noise}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  message=FALSE, 
  warning=FALSE
)
```


## Overview

This vignette shows how to use two helpers from the package for quick experiment data:

- `data_gen()`— generate structured 2D point sets (e.g., `sine`, `circle`, `cluster`) or orthogonal polynomial features.
- `noise_gen()`— generate noise samples from several distributions (Gaussian, uniform, heavy-tailed, microstructure, etc.).

We’ll preview available structures, create simple polynomial features, sample a few noise types, and combine structure + noise.

```{r setup, message=FALSE, warning=FALSE}
library(tidyverse)
library(spinebil)
```


## What the Function Does

### `data_gen()`

Creates synthetic data for benchmarking/visualisation.

* **Structures** (`type` like `"sine"`, `"circle"`, …) return a tibble with columns `x`, `y`, and `structure`.
* **Polynomial** (`type = "polynomial"`) returns an `n × degree` matrix of orthogonal polynomial basis vectors on $[0,1]$.

### `noise_gen()`

Generates a numeric vector of noise values (as a tibble with `value` and `type`) from distributions such as:
  `"gaussian"`, `"uniform"`, `"lognormal"`, `"t_distributed"`, `"cauchy"`, `"beta_noise"`, `"exponential"`, `"microstructure"`.



## Function usage

```r
data_gen(type, n, seed = NULL, degree = NULL, ...)
```

* `type`: `"linear"`, `"sine"`, `"circle"`, `"cluster"`, `"snake"`, `"outliers"`, `"sparse"`, `"clumpy"`, `"skewed"`, `"striated"`, `"concave"`, `"monotonic"`, `"doughnut"`, `"all"`, or `"polynomial"`.
* `n`: number of points/samples.
* `seed`: optional seed for reproducibility.
* `degree`: only for `"polynomial"`; number of basis columns.

```r
noise_gen(n, type = "gaussian", level = 0.1, seed = NULL, ...)
```


* `n`: number of noise samples.
* `type`: distribution name ( `"gaussian"`, `"uniform"`, `"lognormal"`, `"t_distributed"`, `"cauchy"`, `"beta_noise"`, `"exponential"`, `"microstructure"`).
* `level`: scale/strength of noise.
* `seed`: optional seed.


## Example usage

```{r}
# One structure
df_sine <- data_gen("sine", n = 400, seed = 1)

# Multiple structures at once
df_all  <- data_gen("all",  n = 400, seed = 1)
```

### Preview all structures
```{r fig.height=6.5, fig.width=7.5}
ggplot(df_all, aes(x, y)) +
  geom_point(alpha = 0.6, size = 0.6) +
  facet_wrap(~ structure, scales = "free") +
  labs(title = "Synthetic 2D Structures from data_gen()",
       subtitle = "Each panel generated with n = 400")
```


### Polynomial features (`type = "polynomial"`)

```{r}
# Generate a 4-degree orthogonal polynomial basis
dPoly <- data_gen("polynomial", n = 200, degree = 4, seed = 1)

ggplot(dPoly, aes(x = dPoly[,1] , y = dPoly[,2])) +
  geom_point(alpha = 0.7) + 
  xlab("polynomial degree 1") +
  ylab("polynomial degree 2")
```

## `noise_gen()`: noise distributions

```{r}
eps_g <- noise_gen(n = 500, type = "gaussian",   level = 0.06, seed = 340)
eps_t <- noise_gen(n = 500, type = "t_distributed", level = 0.15, seed = 341)
eps_cau <- noise_gen(n = 500, type = "cauchy",     level = 0.04, seed = 342)
```

## Combining structure + noise

As a simple example, let's take a clean sine wave and add Gaussian noise to `y`.

```{r fig.height=4.5, fig.width=7.5}
set.seed(345)
n <- 500
sine_clean <- data_gen("sine", n = n) |> mutate(y = sin(x)) 

# Noise to add on y
eps <- noise_gen(n = n, type = "gaussian", level = 0.06, seed = 123)$value
sine_noisy <- sine_clean |> mutate(y = y + eps)

bind_rows(
  sine_clean  |> mutate(which = "clean"),
  sine_noisy  |> mutate(which = "noisy (gaussian, level = 0.06)")
) |>
  ggplot(aes(x, y, color = which)) +
  geom_point(alpha = 0.6, size = 0.6) +
  labs(title = "Sine Structure with and without Added Noise",
       color = NULL)
```


## Return value

* **`data_gen("polynomial", ...)`** returns an `n × degree` **matrix**.
* **`data_gen(<other type>, ...)`** return a **tibble** with columns `x`, `y`, and `structure`.
* **`noise_gen(...)`** returns a **tibble** with columns `value` (numeric) and `type` (factor/character).


